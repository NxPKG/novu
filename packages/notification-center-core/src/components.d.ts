/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import { IMessage } from '@novu/shared';
import { ColorScheme, IMessageAction, IStore, IStoreQuery, ITab, IUserPreferenceSettings } from './types';
import { ApiService } from '@novu/client';
import { JSX } from './components';
import { I18NLanguage, ITranslationEntry } from './i18n/lang';
import { QueryObserverOptions, QueryObserverResult } from '@tanstack/query-core';
export namespace Components {
  interface AccordionComponent {
    body: Element;
    dataTestId?: string;
    header: Element;
  }
  interface ActionWrapper {
    notification: IMessage;
  }
  interface ArrowLeft {}
  interface BellIcon {
    height?: string;
    width?: string;
  }
  interface ChannelPreference {
    active?: boolean;
    disabled?: boolean;
    type: string;
  }
  interface ChannelPreferences {
    setting: IUserPreferenceSettings;
  }
  interface ChatIcon {
    height?: string;
    width?: string;
  }
  interface CheckIcon {}
  interface ChevronIcon {}
  interface CogIcon {}
  interface EmailIcon {
    height?: string;
    width?: string;
  }
  interface FeedTabLabel {
    api: ApiService;
    isActive: boolean;
    query: IStoreQuery;
    socketUrl?: string;
    tab: ITab;
    token?: string;
  }
  interface LoadingIcon {
    height?: string;
    stroke?: string;
    width?: string;
  }
  interface MobileIcon {
    height?: string;
    width?: string;
  }
  interface NotificationButton {
    index: number;
    messageAction: IMessageAction;
  }
  interface NotificationCenter {}
  interface NotificationCenterFooter {}
  interface NotificationsHeaderRow {
    showUnseenBadge: boolean;
    unseenCount: number;
  }
  interface NotificationsListItem {
    notification: IMessage;
  }
  interface NotificationsTab {
    onSettingsBtnClick?: JSX.NotificationsTabHeader['onSettingsBtnClick'];
    tabs?: ITab[];
  }
  interface NotificationsTabHeader {
    hasTabs: boolean;
    unseenCount: number;
  }
  interface NovuIcon {}
  interface NovuProvider {
    applicationIdentifier: string;
    backendUrl?: string;
    colorScheme?: ColorScheme;
    i18n?: I18NLanguage | ITranslationEntry;
    socketUrl?: string;
    stores: IStore[];
    subscriberHash?: string;
    subscriberId?: string;
  }
  interface SettingsAction {}
  interface SettingsButton {}
  interface SmsIcon {
    height?: string;
    width?: string;
  }
  interface StencilConsumer {
    contextName: string;
    renderer: any;
  }
  interface StencilProvider {
    STENCIL_CONTEXT: { [key: string]: any };
    contextName: string;
  }
  interface StencilQuery {
    listen?: (result: QueryObserverResult) => void;
    options?: QueryObserverOptions;
    renderChildren?: (result: QueryObserverResult) => Element | Element[];
  }
  interface SubscriberPreferencesList {}
  interface SwitchComponent {
    checked?: boolean;
    dataTestId?: string;
    disabled?: boolean;
    onChange: (e: Event) => void;
  }
  interface TabComponent {
    active: boolean;
    label: Element;
  }
  interface TabsComponent {
    active: string;
    tabs: Element[];
  }
  interface TimeMark {
    notification: IMessage;
  }
  interface UserPreferencesHeader {}
  interface WorkflowHeader {
    setting: IUserPreferenceSettings;
  }
  interface WorkflowText {
    color?: string;
    dataTestId?: string;
    size?: 'sm' | 'lg';
    text: string;
  }
}
export interface NotificationsTabHeaderCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLNotificationsTabHeaderElement;
}
export interface StencilConsumerCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLStencilConsumerElement;
}
export interface StencilProviderCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLStencilProviderElement;
}
export interface UserPreferencesHeaderCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLUserPreferencesHeaderElement;
}
declare global {
  interface HTMLAccordionComponentElement extends Components.AccordionComponent, HTMLStencilElement {}
  var HTMLAccordionComponentElement: {
    prototype: HTMLAccordionComponentElement;
    new (): HTMLAccordionComponentElement;
  };
  interface HTMLActionWrapperElement extends Components.ActionWrapper, HTMLStencilElement {}
  var HTMLActionWrapperElement: {
    prototype: HTMLActionWrapperElement;
    new (): HTMLActionWrapperElement;
  };
  interface HTMLArrowLeftElement extends Components.ArrowLeft, HTMLStencilElement {}
  var HTMLArrowLeftElement: {
    prototype: HTMLArrowLeftElement;
    new (): HTMLArrowLeftElement;
  };
  interface HTMLBellIconElement extends Components.BellIcon, HTMLStencilElement {}
  var HTMLBellIconElement: {
    prototype: HTMLBellIconElement;
    new (): HTMLBellIconElement;
  };
  interface HTMLChannelPreferenceElement extends Components.ChannelPreference, HTMLStencilElement {}
  var HTMLChannelPreferenceElement: {
    prototype: HTMLChannelPreferenceElement;
    new (): HTMLChannelPreferenceElement;
  };
  interface HTMLChannelPreferencesElement extends Components.ChannelPreferences, HTMLStencilElement {}
  var HTMLChannelPreferencesElement: {
    prototype: HTMLChannelPreferencesElement;
    new (): HTMLChannelPreferencesElement;
  };
  interface HTMLChatIconElement extends Components.ChatIcon, HTMLStencilElement {}
  var HTMLChatIconElement: {
    prototype: HTMLChatIconElement;
    new (): HTMLChatIconElement;
  };
  interface HTMLCheckIconElement extends Components.CheckIcon, HTMLStencilElement {}
  var HTMLCheckIconElement: {
    prototype: HTMLCheckIconElement;
    new (): HTMLCheckIconElement;
  };
  interface HTMLChevronIconElement extends Components.ChevronIcon, HTMLStencilElement {}
  var HTMLChevronIconElement: {
    prototype: HTMLChevronIconElement;
    new (): HTMLChevronIconElement;
  };
  interface HTMLCogIconElement extends Components.CogIcon, HTMLStencilElement {}
  var HTMLCogIconElement: {
    prototype: HTMLCogIconElement;
    new (): HTMLCogIconElement;
  };
  interface HTMLEmailIconElement extends Components.EmailIcon, HTMLStencilElement {}
  var HTMLEmailIconElement: {
    prototype: HTMLEmailIconElement;
    new (): HTMLEmailIconElement;
  };
  interface HTMLFeedTabLabelElement extends Components.FeedTabLabel, HTMLStencilElement {}
  var HTMLFeedTabLabelElement: {
    prototype: HTMLFeedTabLabelElement;
    new (): HTMLFeedTabLabelElement;
  };
  interface HTMLLoadingIconElement extends Components.LoadingIcon, HTMLStencilElement {}
  var HTMLLoadingIconElement: {
    prototype: HTMLLoadingIconElement;
    new (): HTMLLoadingIconElement;
  };
  interface HTMLMobileIconElement extends Components.MobileIcon, HTMLStencilElement {}
  var HTMLMobileIconElement: {
    prototype: HTMLMobileIconElement;
    new (): HTMLMobileIconElement;
  };
  interface HTMLNotificationButtonElement extends Components.NotificationButton, HTMLStencilElement {}
  var HTMLNotificationButtonElement: {
    prototype: HTMLNotificationButtonElement;
    new (): HTMLNotificationButtonElement;
  };
  interface HTMLNotificationCenterElement extends Components.NotificationCenter, HTMLStencilElement {}
  var HTMLNotificationCenterElement: {
    prototype: HTMLNotificationCenterElement;
    new (): HTMLNotificationCenterElement;
  };
  interface HTMLNotificationCenterFooterElement extends Components.NotificationCenterFooter, HTMLStencilElement {}
  var HTMLNotificationCenterFooterElement: {
    prototype: HTMLNotificationCenterFooterElement;
    new (): HTMLNotificationCenterFooterElement;
  };
  interface HTMLNotificationsHeaderRowElement extends Components.NotificationsHeaderRow, HTMLStencilElement {}
  var HTMLNotificationsHeaderRowElement: {
    prototype: HTMLNotificationsHeaderRowElement;
    new (): HTMLNotificationsHeaderRowElement;
  };
  interface HTMLNotificationsListItemElement extends Components.NotificationsListItem, HTMLStencilElement {}
  var HTMLNotificationsListItemElement: {
    prototype: HTMLNotificationsListItemElement;
    new (): HTMLNotificationsListItemElement;
  };
  interface HTMLNotificationsTabElement extends Components.NotificationsTab, HTMLStencilElement {}
  var HTMLNotificationsTabElement: {
    prototype: HTMLNotificationsTabElement;
    new (): HTMLNotificationsTabElement;
  };
  interface HTMLNotificationsTabHeaderElement extends Components.NotificationsTabHeader, HTMLStencilElement {}
  var HTMLNotificationsTabHeaderElement: {
    prototype: HTMLNotificationsTabHeaderElement;
    new (): HTMLNotificationsTabHeaderElement;
  };
  interface HTMLNovuIconElement extends Components.NovuIcon, HTMLStencilElement {}
  var HTMLNovuIconElement: {
    prototype: HTMLNovuIconElement;
    new (): HTMLNovuIconElement;
  };
  interface HTMLNovuProviderElement extends Components.NovuProvider, HTMLStencilElement {}
  var HTMLNovuProviderElement: {
    prototype: HTMLNovuProviderElement;
    new (): HTMLNovuProviderElement;
  };
  interface HTMLSettingsActionElement extends Components.SettingsAction, HTMLStencilElement {}
  var HTMLSettingsActionElement: {
    prototype: HTMLSettingsActionElement;
    new (): HTMLSettingsActionElement;
  };
  interface HTMLSettingsButtonElement extends Components.SettingsButton, HTMLStencilElement {}
  var HTMLSettingsButtonElement: {
    prototype: HTMLSettingsButtonElement;
    new (): HTMLSettingsButtonElement;
  };
  interface HTMLSmsIconElement extends Components.SmsIcon, HTMLStencilElement {}
  var HTMLSmsIconElement: {
    prototype: HTMLSmsIconElement;
    new (): HTMLSmsIconElement;
  };
  interface HTMLStencilConsumerElement extends Components.StencilConsumer, HTMLStencilElement {}
  var HTMLStencilConsumerElement: {
    prototype: HTMLStencilConsumerElement;
    new (): HTMLStencilConsumerElement;
  };
  interface HTMLStencilProviderElement extends Components.StencilProvider, HTMLStencilElement {}
  var HTMLStencilProviderElement: {
    prototype: HTMLStencilProviderElement;
    new (): HTMLStencilProviderElement;
  };
  interface HTMLStencilQueryElement extends Components.StencilQuery, HTMLStencilElement {}
  var HTMLStencilQueryElement: {
    prototype: HTMLStencilQueryElement;
    new (): HTMLStencilQueryElement;
  };
  interface HTMLSubscriberPreferencesListElement extends Components.SubscriberPreferencesList, HTMLStencilElement {}
  var HTMLSubscriberPreferencesListElement: {
    prototype: HTMLSubscriberPreferencesListElement;
    new (): HTMLSubscriberPreferencesListElement;
  };
  interface HTMLSwitchComponentElement extends Components.SwitchComponent, HTMLStencilElement {}
  var HTMLSwitchComponentElement: {
    prototype: HTMLSwitchComponentElement;
    new (): HTMLSwitchComponentElement;
  };
  interface HTMLTabComponentElement extends Components.TabComponent, HTMLStencilElement {}
  var HTMLTabComponentElement: {
    prototype: HTMLTabComponentElement;
    new (): HTMLTabComponentElement;
  };
  interface HTMLTabsComponentElement extends Components.TabsComponent, HTMLStencilElement {}
  var HTMLTabsComponentElement: {
    prototype: HTMLTabsComponentElement;
    new (): HTMLTabsComponentElement;
  };
  interface HTMLTimeMarkElement extends Components.TimeMark, HTMLStencilElement {}
  var HTMLTimeMarkElement: {
    prototype: HTMLTimeMarkElement;
    new (): HTMLTimeMarkElement;
  };
  interface HTMLUserPreferencesHeaderElement extends Components.UserPreferencesHeader, HTMLStencilElement {}
  var HTMLUserPreferencesHeaderElement: {
    prototype: HTMLUserPreferencesHeaderElement;
    new (): HTMLUserPreferencesHeaderElement;
  };
  interface HTMLWorkflowHeaderElement extends Components.WorkflowHeader, HTMLStencilElement {}
  var HTMLWorkflowHeaderElement: {
    prototype: HTMLWorkflowHeaderElement;
    new (): HTMLWorkflowHeaderElement;
  };
  interface HTMLWorkflowTextElement extends Components.WorkflowText, HTMLStencilElement {}
  var HTMLWorkflowTextElement: {
    prototype: HTMLWorkflowTextElement;
    new (): HTMLWorkflowTextElement;
  };
  interface HTMLElementTagNameMap {
    'accordion-component': HTMLAccordionComponentElement;
    'action-wrapper': HTMLActionWrapperElement;
    'arrow-left': HTMLArrowLeftElement;
    'bell-icon': HTMLBellIconElement;
    'channel-preference': HTMLChannelPreferenceElement;
    'channel-preferences': HTMLChannelPreferencesElement;
    'chat-icon': HTMLChatIconElement;
    'check-icon': HTMLCheckIconElement;
    'chevron-icon': HTMLChevronIconElement;
    'cog-icon': HTMLCogIconElement;
    'email-icon': HTMLEmailIconElement;
    'feed-tab-label': HTMLFeedTabLabelElement;
    'loading-icon': HTMLLoadingIconElement;
    'mobile-icon': HTMLMobileIconElement;
    'notification-button': HTMLNotificationButtonElement;
    'notification-center': HTMLNotificationCenterElement;
    'notification-center-footer': HTMLNotificationCenterFooterElement;
    'notifications-header-row': HTMLNotificationsHeaderRowElement;
    'notifications-list-item': HTMLNotificationsListItemElement;
    'notifications-tab': HTMLNotificationsTabElement;
    'notifications-tab-header': HTMLNotificationsTabHeaderElement;
    'novu-icon': HTMLNovuIconElement;
    'novu-provider': HTMLNovuProviderElement;
    'settings-action': HTMLSettingsActionElement;
    'settings-button': HTMLSettingsButtonElement;
    'sms-icon': HTMLSmsIconElement;
    'stencil-consumer': HTMLStencilConsumerElement;
    'stencil-provider': HTMLStencilProviderElement;
    'stencil-query': HTMLStencilQueryElement;
    'subscriber-preferences-list': HTMLSubscriberPreferencesListElement;
    'switch-component': HTMLSwitchComponentElement;
    'tab-component': HTMLTabComponentElement;
    'tabs-component': HTMLTabsComponentElement;
    'time-mark': HTMLTimeMarkElement;
    'user-preferences-header': HTMLUserPreferencesHeaderElement;
    'workflow-header': HTMLWorkflowHeaderElement;
    'workflow-text': HTMLWorkflowTextElement;
  }
}
declare namespace LocalJSX {
  interface AccordionComponent {
    body?: Element;
    dataTestId?: string;
    header?: Element;
  }
  interface ActionWrapper {
    notification?: IMessage;
  }
  interface ArrowLeft {}
  interface BellIcon {
    height?: string;
    width?: string;
  }
  interface ChannelPreference {
    active?: boolean;
    disabled?: boolean;
    type?: string;
  }
  interface ChannelPreferences {
    setting?: IUserPreferenceSettings;
  }
  interface ChatIcon {
    height?: string;
    width?: string;
  }
  interface CheckIcon {}
  interface ChevronIcon {}
  interface CogIcon {}
  interface EmailIcon {
    height?: string;
    width?: string;
  }
  interface FeedTabLabel {
    api?: ApiService;
    isActive?: boolean;
    query?: IStoreQuery;
    socketUrl?: string;
    tab?: ITab;
    token?: string;
  }
  interface LoadingIcon {
    height?: string;
    stroke?: string;
    width?: string;
  }
  interface MobileIcon {
    height?: string;
    width?: string;
  }
  interface NotificationButton {
    index?: number;
    messageAction?: IMessageAction;
  }
  interface NotificationCenter {}
  interface NotificationCenterFooter {}
  interface NotificationsHeaderRow {
    showUnseenBadge?: boolean;
    unseenCount?: number;
  }
  interface NotificationsListItem {
    notification?: IMessage;
  }
  interface NotificationsTab {
    onSettingsBtnClick?: JSX.NotificationsTabHeader['onSettingsBtnClick'];
    tabs?: ITab[];
  }
  interface NotificationsTabHeader {
    hasTabs?: boolean;
    onSettingsBtnClick?: (event: NotificationsTabHeaderCustomEvent<MouseEvent | TouchEvent>) => void;
    unseenCount?: number;
  }
  interface NovuIcon {}
  interface NovuProvider {
    applicationIdentifier?: string;
    backendUrl?: string;
    colorScheme?: ColorScheme;
    i18n?: I18NLanguage | ITranslationEntry;
    socketUrl?: string;
    stores?: IStore[];
    subscriberHash?: string;
    subscriberId?: string;
  }
  interface SettingsAction {}
  interface SettingsButton {}
  interface SmsIcon {
    height?: string;
    width?: string;
  }
  interface StencilConsumer {
    contextName?: string;
    onMountConsumer?: (event: StencilConsumerCustomEvent<any>) => void;
    renderer?: any;
  }
  interface StencilProvider {
    STENCIL_CONTEXT?: { [key: string]: any };
    contextName?: string;
    onMountConsumer?: (event: StencilProviderCustomEvent<any>) => void;
  }
  interface StencilQuery {
    listen?: (result: QueryObserverResult) => void;
    options?: QueryObserverOptions;
    renderChildren?: (result: QueryObserverResult) => Element | Element[];
  }
  interface SubscriberPreferencesList {}
  interface SwitchComponent {
    checked?: boolean;
    dataTestId?: string;
    disabled?: boolean;
    onChange?: (e: Event) => void;
  }
  interface TabComponent {
    active?: boolean;
    label?: Element;
  }
  interface TabsComponent {
    active?: string;
    tabs?: Element[];
  }
  interface TimeMark {
    notification?: IMessage;
  }
  interface UserPreferencesHeader {
    onBackButtonClick?: (event: UserPreferencesHeaderCustomEvent<MouseEvent | TouchEvent>) => void;
  }
  interface WorkflowHeader {
    setting?: IUserPreferenceSettings;
  }
  interface WorkflowText {
    color?: string;
    dataTestId?: string;
    size?: 'sm' | 'lg';
    text?: string;
  }
  interface IntrinsicElements {
    'accordion-component': AccordionComponent;
    'action-wrapper': ActionWrapper;
    'arrow-left': ArrowLeft;
    'bell-icon': BellIcon;
    'channel-preference': ChannelPreference;
    'channel-preferences': ChannelPreferences;
    'chat-icon': ChatIcon;
    'check-icon': CheckIcon;
    'chevron-icon': ChevronIcon;
    'cog-icon': CogIcon;
    'email-icon': EmailIcon;
    'feed-tab-label': FeedTabLabel;
    'loading-icon': LoadingIcon;
    'mobile-icon': MobileIcon;
    'notification-button': NotificationButton;
    'notification-center': NotificationCenter;
    'notification-center-footer': NotificationCenterFooter;
    'notifications-header-row': NotificationsHeaderRow;
    'notifications-list-item': NotificationsListItem;
    'notifications-tab': NotificationsTab;
    'notifications-tab-header': NotificationsTabHeader;
    'novu-icon': NovuIcon;
    'novu-provider': NovuProvider;
    'settings-action': SettingsAction;
    'settings-button': SettingsButton;
    'sms-icon': SmsIcon;
    'stencil-consumer': StencilConsumer;
    'stencil-provider': StencilProvider;
    'stencil-query': StencilQuery;
    'subscriber-preferences-list': SubscriberPreferencesList;
    'switch-component': SwitchComponent;
    'tab-component': TabComponent;
    'tabs-component': TabsComponent;
    'time-mark': TimeMark;
    'user-preferences-header': UserPreferencesHeader;
    'workflow-header': WorkflowHeader;
    'workflow-text': WorkflowText;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'accordion-component': LocalJSX.AccordionComponent & JSXBase.HTMLAttributes<HTMLAccordionComponentElement>;
      'action-wrapper': LocalJSX.ActionWrapper & JSXBase.HTMLAttributes<HTMLActionWrapperElement>;
      'arrow-left': LocalJSX.ArrowLeft & JSXBase.HTMLAttributes<HTMLArrowLeftElement>;
      'bell-icon': LocalJSX.BellIcon & JSXBase.HTMLAttributes<HTMLBellIconElement>;
      'channel-preference': LocalJSX.ChannelPreference & JSXBase.HTMLAttributes<HTMLChannelPreferenceElement>;
      'channel-preferences': LocalJSX.ChannelPreferences & JSXBase.HTMLAttributes<HTMLChannelPreferencesElement>;
      'chat-icon': LocalJSX.ChatIcon & JSXBase.HTMLAttributes<HTMLChatIconElement>;
      'check-icon': LocalJSX.CheckIcon & JSXBase.HTMLAttributes<HTMLCheckIconElement>;
      'chevron-icon': LocalJSX.ChevronIcon & JSXBase.HTMLAttributes<HTMLChevronIconElement>;
      'cog-icon': LocalJSX.CogIcon & JSXBase.HTMLAttributes<HTMLCogIconElement>;
      'email-icon': LocalJSX.EmailIcon & JSXBase.HTMLAttributes<HTMLEmailIconElement>;
      'feed-tab-label': LocalJSX.FeedTabLabel & JSXBase.HTMLAttributes<HTMLFeedTabLabelElement>;
      'loading-icon': LocalJSX.LoadingIcon & JSXBase.HTMLAttributes<HTMLLoadingIconElement>;
      'mobile-icon': LocalJSX.MobileIcon & JSXBase.HTMLAttributes<HTMLMobileIconElement>;
      'notification-button': LocalJSX.NotificationButton & JSXBase.HTMLAttributes<HTMLNotificationButtonElement>;
      'notification-center': LocalJSX.NotificationCenter & JSXBase.HTMLAttributes<HTMLNotificationCenterElement>;
      'notification-center-footer': LocalJSX.NotificationCenterFooter &
        JSXBase.HTMLAttributes<HTMLNotificationCenterFooterElement>;
      'notifications-header-row': LocalJSX.NotificationsHeaderRow &
        JSXBase.HTMLAttributes<HTMLNotificationsHeaderRowElement>;
      'notifications-list-item': LocalJSX.NotificationsListItem &
        JSXBase.HTMLAttributes<HTMLNotificationsListItemElement>;
      'notifications-tab': LocalJSX.NotificationsTab & JSXBase.HTMLAttributes<HTMLNotificationsTabElement>;
      'notifications-tab-header': LocalJSX.NotificationsTabHeader &
        JSXBase.HTMLAttributes<HTMLNotificationsTabHeaderElement>;
      'novu-icon': LocalJSX.NovuIcon & JSXBase.HTMLAttributes<HTMLNovuIconElement>;
      'novu-provider': LocalJSX.NovuProvider & JSXBase.HTMLAttributes<HTMLNovuProviderElement>;
      'settings-action': LocalJSX.SettingsAction & JSXBase.HTMLAttributes<HTMLSettingsActionElement>;
      'settings-button': LocalJSX.SettingsButton & JSXBase.HTMLAttributes<HTMLSettingsButtonElement>;
      'sms-icon': LocalJSX.SmsIcon & JSXBase.HTMLAttributes<HTMLSmsIconElement>;
      'stencil-consumer': LocalJSX.StencilConsumer & JSXBase.HTMLAttributes<HTMLStencilConsumerElement>;
      'stencil-provider': LocalJSX.StencilProvider & JSXBase.HTMLAttributes<HTMLStencilProviderElement>;
      'stencil-query': LocalJSX.StencilQuery & JSXBase.HTMLAttributes<HTMLStencilQueryElement>;
      'subscriber-preferences-list': LocalJSX.SubscriberPreferencesList &
        JSXBase.HTMLAttributes<HTMLSubscriberPreferencesListElement>;
      'switch-component': LocalJSX.SwitchComponent & JSXBase.HTMLAttributes<HTMLSwitchComponentElement>;
      'tab-component': LocalJSX.TabComponent & JSXBase.HTMLAttributes<HTMLTabComponentElement>;
      'tabs-component': LocalJSX.TabsComponent & JSXBase.HTMLAttributes<HTMLTabsComponentElement>;
      'time-mark': LocalJSX.TimeMark & JSXBase.HTMLAttributes<HTMLTimeMarkElement>;
      'user-preferences-header': LocalJSX.UserPreferencesHeader &
        JSXBase.HTMLAttributes<HTMLUserPreferencesHeaderElement>;
      'workflow-header': LocalJSX.WorkflowHeader & JSXBase.HTMLAttributes<HTMLWorkflowHeaderElement>;
      'workflow-text': LocalJSX.WorkflowText & JSXBase.HTMLAttributes<HTMLWorkflowTextElement>;
    }
  }
}
